package com.csumb.cst363;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class ControllerPrescriptionCreate {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    /*
     * Doctor requests blank form for new prescription.
     */
    @GetMapping("/prescription/new")
    public String newPrescription(Model model) {
        model.addAttribute("prescription", new Prescription());
        return "prescription_create";
    }

    /*
     * Process the new prescription form.
     * 1. Validate that Doctor SSN exists and matches Doctor Name.
     * 2. Validate that Patient SSN exists and matches Patient Name.
     * 3. Validate that Drug name exists.
     * 4. Insert new prescription.
     * 5. If error, return error message and the prescription form.
     * 6. Otherwise, return the prescription with the rxid number that was generated by the database.
     */
    @PostMapping("/prescription")
    public String createPrescription(Prescription p, Model model) {
        try {
            // 1. Validate that Doctor SSN exists and matches Doctor Name.
            if (!validateDoctor(p.getDoctor_ssn(), p.getDoctorFirstName(), p.getDoctorLastName())) {
                model.addAttribute("message", "Invalid Doctor information.");
                model.addAttribute("prescription", p);
                return "prescription_create";
            }

            // 2. Validate that Patient SSN exists and matches Patient Name.
            if (!validatePatient(p.getPatient_ssn(), p.getPatientFirstName(), p.getPatientLastName())) {
                model.addAttribute("message", "Invalid Patient information.");
                model.addAttribute("prescription", p);
                return "prescription_create";
            }

            // 3. Validate that Drug name exists.
            if (!validateDrug(p.getDrugName())) {
                model.addAttribute("message", "Invalid Drug information.");
                model.addAttribute("prescription", p);
                return "prescription_create";
            }

            // 4. Set current date as the start date.
            p.setStartDate(new Date());

            // 5. Set end date as 30 days after the start date.
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(p.getStartDate());
            calendar.add(Calendar.DATE, 30);
            p.setEndDate(calendar.getTime());

            // 6. Insert new prescription.
            insertPrescription(p);

            // 7. Set fake data for auto-generated prescription id.
            p.setRxid("RX1980031234");

            model.addAttribute("message", "Prescription created.");
            model.addAttribute("prescription", p);
            return "prescription_show";
        } catch (SQLException e) {
            // Handle any database errors
            model.addAttribute("message", "Error processing the prescription.");
            model.addAttribute("prescription", p);
            return "prescription_create";
        }
    }



    /*
     * Validate that Doctor SSN exists and matches Doctor Name.
     */
    private boolean validateDoctor(String doctorssn, String doctorFirstName, String doctorLastName) throws SQLException {
        Connection conn = getConnection();
        PreparedStatement stmt = conn.prepareStatement("SELECT COUNT(*) FROM doctor WHERE doctorssn = ? AND first_name = ? AND last_name = ?");
        stmt.setString(1, doctorssn);
        stmt.setString(2, doctorFirstName);
        stmt.setString(3, doctorLastName);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            int count = rs.getInt(1);
            return count > 0;
        }
        return false;
    }

    /*
     * Validate that Patient SSN exists and matches Patient Name.
     */
    private boolean validatePatient(String patient_ssn, String patientFirstName, String patientLastName) throws SQLException {
        Connection conn = getConnection();
        PreparedStatement stmt = conn.prepareStatement("SELECT COUNT(*) FROM patient WHERE patientssn = ? AND firstname = ? AND lastname = ?");
        stmt.setString(1, patient_ssn);
        stmt.setString(2, patientFirstName);
        stmt.setString(3, patientLastName);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            int count = rs.getInt(1);
            return count > 0;
        }
        return false;
    }

    /*
     * Validate that Drug name exists.
     */
    private boolean validateDrug(String drugName) throws SQLException {
        Connection conn = getConnection();
        PreparedStatement stmt = conn.prepareStatement("SELECT COUNT(*) FROM drug WHERE formula = ?");
        stmt.setString(1, drugName);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            int count = rs.getInt(1);
            return count > 0;
        }
        return false;
    }

    /*
     * Insert new prescription.
     */
    private void insertPrescription(Prescription p) throws SQLException {
        Connection conn = getConnection();
        PreparedStatement stmt = conn.prepareStatement("INSERT INTO prescription (pharmacyName, startdate, enddate, quantity, doctorname, doctorfirstname, doctorlastname, patientid, formula, doctorssn, patientssn, patientfirstname, patientlastname, pharmacyaddress) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", Statement.RETURN_GENERATED_KEYS);
        stmt.setString(1, p.getPharmacyName());
        stmt.setDate(2, new java.sql.Date(p.getStartDate().getTime()));
        stmt.setDate(3, new java.sql.Date(p.getEndDate().getTime()));
        stmt.setInt(4, p.getQuantity());
        stmt.setString(5, p.getDoctorFirstName() + " " + p.getDoctorLastName());
        stmt.setString(6, p.getDoctorFirstName());
        stmt.setString(7, p.getDoctorLastName());
        stmt.setString(8, p.getPatient_ssn());
        stmt.setString(9, p.getDrugName());
        stmt.setString(10, p.getDoctor_ssn());
        stmt.setString(11, p.getPatient_ssn());
        stmt.setString(12, p.getPatientFirstName());
        stmt.setString(13, p.getPatientLastName());
        stmt.setString(14, p.getPharmacyAddress());
        stmt.executeUpdate();

        ResultSet rs = stmt.getGeneratedKeys();
        if (rs.next()) {
            int rxid = rs.getInt(1);
            p.setRxid("RX" + rxid);
        }
    }

    /*
     * Return JDBC Connection using jdbcTemplate in Spring Server.
     */
    private Connection getConnection() throws SQLException {
        Connection conn = jdbcTemplate.getDataSource().getConnection();
        return conn;
    }
}
